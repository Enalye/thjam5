use "enemies.gr"
use "rythm.gr"

int CollisionHitbox = 0;
int CollisionRadius = 1;
float away = 0;
int bias = 0;
float sqr_away = 360000;
int uspb = 375_000;


main {
    beatHandling();
    loadBackground("background2", "raiko", "");
	spawnJumper(-230, 15);
	let floor = createWall("floor2", 0, -760, 580, 200);

	for(i, [0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 330]) {
		rotatingPlatform(i as float*3.1415f/180f, 560, 32, 4f);
		if(i % 60 == 0) {
			rotatingPlatform((i+20) as float*3.1415f / 180f, 300, 32, -2f);
		}
		//rotatingProjectile((i+40) as float*3.1415f/180f, 320, 10, -5f);
		int size = 10;
	}
	managePlatforms();
}

func between(int ref, int begin, int end) bool {
	int now = time()-ref;
	return (begin < now) and (now < end);
}

task jumperWave(int duration, int interval) {
	int t_o = time();
	int t_e = duration+t_o;
	loop {
		spawnJumper(-230, 15);
		spawnJumper(230, 15);
		waitUSeconds(interval);
		if(time()>t_e) return;
	}
}


object SniperBullet {
	Projectile p;
	float speedX;
	float speedY;
}
	
func createSniperBullet(int x, int y, float speed) SniperBullet {
	SniperBullet ret = new SniperBullet;
	ret.p = createProjectile("bullet", x, y, 10, 10, CollisionRadius, "killPlayerNoCancel");
	redGradient(ret.p, 100f);
	Player p= getPlayer();
	float sx = p::getPositionX()-x;
	float sy = p::getPositionY()-y;
	float dist = sqrt(sx*sx+sy*sy);
	sx=speed*sx/dist;
	sy=speed*sy/dist;
	ret.speedX = -sx;
	ret.speedY = -sy;
	return ret;
}

task bulletSniper(int spawn, int x, int y, float speed, int interval, int shots) {
	waitUntil(spawn);
	array(SniperBullet) arr = array(SniperBullet)[];
	arr ~= createSniperBullet(x,y,speed);
	spawn+=interval;
	let t_last = time();
	loop {
		let t_l = time();
		float second_fragment = (t_last-t_l)/1_000_000f;
		if(shots < -100) break;
		if(time()>spawn)
		{
			if(shots > 0)
			{
				arr ~= createSniperBullet(x,y,speed);
			}
			spawn+=interval;
			shots--;
		}
		for(elem, arr) {
			elem.p::move(elem.speedX*second_fragment, elem.speedY*second_fragment);
		}
		t_last = t_l;
		yield;
	}
	for(elem, arr) {
		elem.p::destroy();
	}
}

task moon(int spawn, int x, int y, float v_x, float v_y) {
	waitUntil(spawn);
	let proj = createProjectile("bullet", x, y, 24, 24, CollisionRadius, "killPlayerNoCancel");
	redGradient(proj, 100f);
	let t_last = time();
	loop {
		let t_l = time();
		if(t_l<spawn+12_000_000)
		{
			float second_fragment = (t_last-t_l)/1_000_000f;
			v_y = v_y-300f*second_fragment;
			if(v_y < -1800f)
			{
				v_y = -1800.0;
			}
			proj::move(v_x*second_fragment, v_y*second_fragment);
			t_last = t_l;
			yield;
		}
		else
		{
			break;
		}
	}
	proj::destroy();
}

task claws(int spawn, int active, int ground, int out) {
	waitUntil(spawn);
	let left  = createProjectile("bullet", -150, 130, 32, 32, CollisionHitbox, "killPlayerNoCancel");
	let right = createProjectile("bullet", 150, 130, 32, 32, CollisionHitbox, "killPlayerNoCancel");
	redGradient(left, 100f);
	redGradient(right, 100f);
	loop {
		if(time()<active)
		{
			yield;
		}
		else
		{
			break;
		}
	}
	int t_o = 0;
	loop {
		t_o = time();
		if(t_o<ground)
		{
			left::moveTo(-150f, lerp(130f,30f,(t_o-active)/(ground-active) as float));
			right::moveTo(150f, lerp(130f,30f,(t_o-active)/(ground-active) as float));
			yield;
		}
		else
		{
			break;
		}
	}
	left::destroy();
	right::destroy();
	left = createProjectile("bullet", -150, 30, 32, 32, CollisionHitbox, "killPlayerNoCancel");
	right = createProjectile("bullet", 150, 30, 32, 32, CollisionHitbox, "killPlayerNoCancel");
	redGradient(left, 100f);
	redGradient(right, 100f);
	loop {
		t_o = time();
		if(t_o<out)
		{
			left::moveTo(-lerp(150f, 450f,(t_o-ground)/(out-ground) as float),30f);
			right::moveTo(lerp(150f, 450f,(t_o-ground)/(out-ground) as float),30f);
			yield;
		}
		else
		{
			break;
		}
	}
	loop {
		t_o = time();
		if(t_o<out-500_000)
		{
			yield;
		}
		else
		{
			break;
		}
	}
	left::destroy();
	right::destroy();
}

task spawnJumper(int x, int y) {
	let enemy = spawnEnemy("jumper", x, y);
	jumpTowards(enemy, 60, 10f, 5f);
}

task managePlatforms() {
	int t_o = time();
	int second = 1_000_000;
	bool flag01 = false;
	bool flag02 = false;
	bool flag03 = false;
	bool flag04 = false;
	bool flag05 = false;

	// Time based attacks

	bulletSniper(t_o+8*second,0, 400, 250f, uspb*2, 22);
	moon(t_o+8*second         ,  -32, 360, -  0f, 400f);
	moon(t_o+8*second+1*uspb/2,  -52, 360, - 50f, 350f);
	moon(t_o+8*second+2*uspb/2,  -72, 360, -100f, 300f);
	moon(t_o+8*second+3*uspb/2,  -92, 360, -150f, 250f);
	moon(t_o+8*second+4*uspb/2, -112, 360, -200f, 200f);
	moon(t_o+8*second+5*uspb/2, -132, 360, -250f, 150f);
	moon(t_o+8*second+6*uspb/2, -152, 360, -300f, 100f);
	moon(t_o+8*second+7*uspb/2, -132, 360, -350f,  50f);
	moon(t_o+8*second+8*uspb/2, -152, 360, -400f,   0f);
	claws(t_o+10*second, t_o+10*second+600_000, t_o+11*second+120_000, t_o+11*second+500_000);
	moon(t_o+12*second         ,  32, 360,   0f, 400f);
	moon(t_o+12*second+1*uspb/2,  52, 360,  50f, 350f);
	moon(t_o+12*second+2*uspb/2,  72, 360, 100f, 300f);
	moon(t_o+12*second+3*uspb/2,  92, 360, 150f, 250f);
	moon(t_o+12*second+4*uspb/2, 112, 360, 200f, 200f);
	moon(t_o+12*second+5*uspb/2, 132, 360, 250f, 150f);
	moon(t_o+12*second+6*uspb/2, 152, 360, 300f, 100f);
	moon(t_o+12*second+7*uspb/2, 132, 360, 350f,  50f);
	moon(t_o+12*second+8*uspb/2, 152, 360, 400f,   0f);
	moon(t_o+16*second         ,  -32, 360, -  0f/2, 400f*2);
	moon(t_o+16*second+1*uspb/2,  -52, 360, - 50f/2, 350f*2);
	moon(t_o+16*second+2*uspb/2,  -72, 360, -100f/2, 300f*2);
	moon(t_o+16*second+3*uspb/2,  -92, 360, -150f/2, 250f*2);
	moon(t_o+16*second+4*uspb/2, -112, 360, -200f/2, 200f*2);
	moon(t_o+16*second+5*uspb/2, -132, 360, -250f/2, 150f*2);
	moon(t_o+16*second+6*uspb/2, -152, 360, -300f/2, 100f*2);
	moon(t_o+16*second+7*uspb/2, -132, 360, -350f/2,  50f*2);
	moon(t_o+16*second+8*uspb/2, -152, 360, -400f/2,   0f*2);
	bulletSniper(t_o+37*second       , 0, 400, 250f, uspb*4, 44);
	bulletSniper(t_o+37*second+uspb/6, 0, 400, 250f, uspb*4, 44);
	bulletSniper(t_o+37*second+uspb/6+uspb/6, 0, 400, 250f, uspb*4, 44);
	bulletSniper(t_o+64*second       , 0, 400, 250f, uspb*4, 44);
	bulletSniper(t_o+64*second+uspb/6, 0, 400, 250f, uspb*4, 44);
	bulletSniper(t_o+64*second+uspb/6+uspb/6, 0, 400, 250f, uspb*4, 44);
	bulletSniper(t_o+64*second+uspb/6+uspb/6+uspb/6, 0, 400, 250f, uspb*4, 44);
	claws(t_o+96*second, t_o+97*second+400_000, t_o+97*second+750_000, t_o+98*second+140_000);
	moon(t_o+97*second         ,  32, 360,   0f, 400f);
	moon(t_o+97*second+1*uspb/2,  52, 360,  50f, 350f);
	moon(t_o+97*second+2*uspb/2,  72, 360, 100f, 300f);
	moon(t_o+97*second+3*uspb/2,  92, 360, 150f, 250f);
	moon(t_o+97*second+4*uspb/2, 112, 360, 200f, 200f);
	moon(t_o+97*second+5*uspb/2, 132, 360, 250f, 150f);
	moon(t_o+97*second+6*uspb/2, 152, 360, 300f, 100f);
	moon(t_o+97*second+7*uspb/2, 132, 360, 350f,  50f);
	moon(t_o+97*second+8*uspb/2, 152, 360, 400f,   0f);
	bulletSniper(t_o+100*second, 0, 400, 250f, uspb*4, 44);
	moon(t_o+105*second         ,  -32, 360, -  0f/2, 400f*2);
	moon(t_o+105*second+1*uspb/2,  -52, 360, - 50f/2, 350f*2);
	moon(t_o+105*second+2*uspb/2,  -72, 360, -100f/2, 300f*2);
	moon(t_o+105*second+3*uspb/2,  -92, 360, -150f/2, 250f*2);
	moon(t_o+105*second+4*uspb/2, -112, 360, -200f/2, 200f*2);
	moon(t_o+105*second+5*uspb/2, -132, 360, -250f/2, 150f*2);
	moon(t_o+105*second+6*uspb/2, -152, 360, -300f/2, 100f*2);
	moon(t_o+105*second+7*uspb/2, -132, 360, -350f/2,  50f*2);
	moon(t_o+105*second+8*uspb/2, -152, 360, -400f/2,   0f*2);


	// Phase controls and waves
	loop {
		int now = time()-t_o;
		//claws(t_o+10*second, t_o+10*second+600_000, t_o+11*second+120_000, t_o+11*second+500_000);
		if(between(t_o, 37*second, 46*second)) {
			away = lerp(0.0, 500.0, (now-37*second)/(second*(9f)) );
		}
		if(now > 42*second and !flag02) {
			flag02 = true;
			jumperWave(22*second, 2_300_000);
		}
		if(now > 65*second and !flag03) {
			flag03 = true;
			jumperWave(22*second, 1_200_000);
		}
		if(between(t_o, 88*second, 97*second)) {
			away = lerp(500.0, 0.0, (now-88*second)/(second*(9f)) );
		}
		if(between(t_o, 106*second+370_000, 115*second+370_000)) {
			away = lerp(0.0, 500.0, (now-106*second-370_000)/(second*(9f)) );
		}
		if(now > 110*second and !flag04) {
			flag04 = true;
			jumperWave(12*second, 1_800_000);
		}
		if(now > 123*second and !flag05) {
			flag05 = true;
			jumperWave(22*second, 1_100_000);
		}
		if(between(t_o, 133*second+100_000, 142*second+100_000)) {
			away = lerp(500.0, 0.0, (now-133*second-100_000)/(second*(9f)) );
			if(!flag01)
			{
				flag01 = true;
				for(i, [0, 60, 120, 180, 240, 300])
				{
					rotatingPlatform(i as float*3.1415f/180f, 750, 32, 0.7f);
				}	
			}
		}
		yield;
	}
}

func enemyOnPlatform(int x, int y) Enemy {
    let enemy = spawnEnemy("", x, y);
    return enemy;
}

task rotatingPlatform(float angle, int radius, int size, float speed) {
    let wall = createWall("platform2", ((radius+away)*cos(angle)-size/2) as int, ((radius+away)*sin(angle)-size/2) as int, size * 2, size);

	int t_o = time();
    loop {
        float t = (time() - t_o) / 60_000_000f;
        wall::moveTo(((radius+away)*cos(angle+t*speed*2*3.1415)-size/2), ((radius+away)*sin(angle+t*speed*2*3.1415)-size/2));
        yield
    }
}

task rotatingProjectile(float angle, int radius, int size, float speed) {
    let wall = createProjectile("bullet", ((radius as float)*cos(angle)-size/2) as int, ((radius as float)*cos(angle)-size/2) as int, size, size, CollisionHitbox, "killPlayer");

	int t_o = time();
    loop {
        float t = (time() - t_o) / 60_000_000f;
        wall::moveTo(((radius as float)*cos(angle+t*speed*2*3.1415)-size/2), ((radius as float)*sin(angle+t*speed*2*3.1415)-size/2));
        yield
    }
}

event killPlayer(Projectile projectile, Player player) {
	player::killp();
	projectile::destroy();
}

event killPlayerNoCancel(Projectile projectile, Player player) {
	player::killp();
}