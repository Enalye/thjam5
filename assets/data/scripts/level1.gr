use "enemies.gr"
use "rythm.gr"

int CollisionHitbox = 0;
int CollisionRadius = 1;

main {
    beatHandling();
    movingPlatformExample(-120, 60);
    movingPlatformExample(250, 90);

	for(i, [0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 330])
	{
		rotatingPlatform(i as float*3.1415f/180f, 150, 15, 4f);
		rotatingPlatform((i+20) as float*3.1415f / 180f, 280, 15, -2f);
		rotatingProjectile((i+40) as float*3.1415f/180f, 320, 15, -5f);
		int size = 10;
	}
}

task movingPlatformExample(int x, int y) {
    let wall  = createWall(x, y, 60, 60);
    let enemy = enemyOnPlatform(x, y + 60 + 16);
    jumpTowards(enemy, 60, 10f, 5f);

    int t = 0;
    loop {
        let f = sin(t / 100f);
        wall::move(f, f);
        t ++;
        yield
    }
}

func enemyOnPlatform(int x, int y) Enemy {
    let enemy = spawnEnemy("", x, y);
    return enemy;
}

task rotatingPlatform(float angle, int radius, int size, float speed) {
    let wall = createWall(((radius as float)*cos(angle)-size/2) as int, ((radius as float)*sin(angle)-size/2) as int, size, size);

	int t_o = time();
    loop {
        float t = (time() - t_o) / 60_000_000f;
        wall::moveTo(((radius as float)*cos(angle+t*speed*2*3.1415)-size/2), ((radius as float)*sin(angle+t*speed*2*3.1415)-size/2));
        yield
    }
}

task rotatingProjectile(float angle, int radius, int size, float speed) {
    let wall = createProjectile(((radius as float)*cos(angle)-size/2) as int, ((radius as float)*cos(angle)-size/2) as int, size, size, CollisionHitbox, "killPlayer");

	int t_o = time();
    loop {
        float t = (time() - t_o) / 60_000_000f;
        wall::moveTo(((radius as float)*cos(angle+t*speed*2*3.1415)-size/2), ((radius as float)*sin(angle+t*speed*2*3.1415)-size/2));
        yield
    }
}

event killPlayer(Projectile projectile, Player player) {
	player::killp();
	projectile::destroy();
}